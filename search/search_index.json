{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my notes!","text":"<p>Hi, I'm Yiannis! I work with software and data. Over the years I kept a few random notes. While trying to structure them, I thought of making them public, just in case anyone would find them useful.</p> <p>I have actually used, read, or studied everything that I add here (or at least a big part of it).</p> <p>Feel free to browse and add your suggestions!</p>"},{"location":"about_me/","title":"About me","text":"<p>A few words about me. Will write them eventually :)</p>"},{"location":"notes/","title":"Index","text":"<p>My (mostly random) notes on things I've worked on in the past.</p>"},{"location":"notes/data_products/","title":"Things to ask before starting work on a Data/Machine Learning project.","text":"<p>This is a list of questions I try to answer whenever I start working on a new data/machine learning project.</p>"},{"location":"notes/data_products/#problem-statement","title":"Problem statement","text":"<p>Start with understanding the problem that needs to be solved. </p> <ul> <li>What is the problem we are solving?</li> <li>How are we currently solving it?</li> <li>Which are the challenges of the current solution?</li> <li>How can we quantify the value of solving the problem?</li> <li>Who will use the solution and how?</li> <li>What are the costs of error and how can we mitigate them?</li> <li>What is the minimum improvement that would create meaningful value?</li> <li>Which metrics will we look to determine the success or not?</li> </ul>"},{"location":"notes/data_products/#understand-the-data","title":"Understand the data","text":"<p>Next part is data requirements. Note that some of them can be asked, but in some cases some exploratory work might be needed to answer the questions. This is a good thing, as it can help you understand the problem and the data better.</p> <ul> <li>What are the data requirements for the solution?</li> <li>What is the current and expected data volume?</li> <li>What kind of data preprocessing needs to happen?</li> <li>What data gaps exist in our current state? How can we close them?</li> </ul>"},{"location":"notes/data_products/#design","title":"Design","text":"<p>Feedback from the previous group of questions can be used to start thinking about alternative designs. However, when designing the final solution, it's worth keeping in mind the following items:</p> <ul> <li>What are the key capabilities required?</li> <li>What are the production requirements for the desired solution?</li> <li>Which is the best set of technologies to deliver this workload?</li> <li>Which additional limitations (if any) exist?</li> </ul>"},{"location":"notes/data_products/#project-details","title":"Project details","text":"<ul> <li>When does this feature need to be delivered?</li> <li>When can it begin?</li> <li>Which resources or support is required?</li> <li>Who will maintain the project post-completion?</li> <li>What are the execution risks and how can they be mitigated?</li> </ul>"},{"location":"notes/data_quality/","title":"Data Quality","text":"<p>While talking to different people about data quality, I noticed that most of them mean different things. There's some great posts over the web. </p> <p>Here's a starting point for data quality.</p> <p>I haven't found a 'golden standard\" on data quality. The following items might be available in other places in the web with slightly different name or grouping. It's also not an exhaustive list.</p>"},{"location":"notes/data_quality/#consistency","title":"Consistency","text":"<p>Are there any contradictions in the data?</p> <ul> <li>Are data values the same across data sets/data sources?</li> <li>Do multiple instances of the data contain conflicting information?</li> </ul> <p>Examples: - Multiple sources of truth with contradicting data. - Duplicate values. - Duplication of logic or forks of code. - Missing updates in the data.</p>"},{"location":"notes/data_quality/#completeness","title":"Completeness","text":"<p>How much of the data are missing?</p> <ul> <li>Is all information available?</li> <li>Do any data values have missing elements?</li> <li>Are data unusable?</li> </ul> <p>Examples:</p> <ul> <li>Nulls or empty strings.</li> <li>Missing archived data/snapshots/backups.</li> <li>Broken references.</li> </ul>"},{"location":"notes/data_quality/#accuracy","title":"Accuracy","text":"<p>How representative to reality are nthe data?</p> <ul> <li>Do data object represent the \"real world\" values?</li> <li>Are there spellings in data?</li> </ul> <p>Examples:</p> <ul> <li>Incorrect calculations.</li> <li>Spelling errors.</li> <li>Rounding errors.</li> <li>Date/time without timezones.</li> </ul>"},{"location":"notes/data_quality/#validity","title":"Validity","text":"<p>Are data in expected format?</p> <ul> <li>Do datasets/rows comply with specified formats/schema?</li> <li>Do all data values comply with expected format?</li> <li>Does data follow business rules?</li> <li>Are any data missing relationship linkages?</li> </ul> <p>Examples:</p> <ul> <li>Schema not followed.</li> <li>Incorrect date formats (i.e. <code>May 1st, 2023</code> instead of <code>2023-05-01</code>.)</li> </ul>"},{"location":"notes/data_quality/#freshness","title":"Freshness","text":"<p>How close are the published data to latest data?</p> <ul> <li>Are the latest data available?</li> <li>Is access to data available within expected time frame?</li> <li>What is the expected delay for real-time data?</li> </ul> <p>Examples:</p> <ul> <li>Agreed SLAs for monthly/weekly data/reports.</li> <li>Throughput issues.</li> <li>Stale data form 3rd party providers or from ingestion pipelines.</li> </ul>"},{"location":"notes/data_quality/#accessibility","title":"Accessibility","text":"<p>Are the data accessible now and over time?</p> <ul> <li>How easy is it to get data?</li> </ul> <p>Examples:</p> <ul> <li>Multiple technologies to get data.</li> <li>Different patterns.</li> <li>Setup overhead (credential, load process etc).</li> <li>Possible issues to other teams (i.e. blocking queries).</li> </ul>"},{"location":"notes/data_quality/#usability","title":"Usability","text":"<p>Are the data easy to use?</p> <ul> <li>How easy is it to work with data?</li> <li>How easy is it to join with other datasets?</li> <li>Is the data shape easy to handle or does it require transformations?</li> </ul> <p>Examples:</p> <ul> <li>Column/field naming conventions.</li> <li>Shape of data (i.e. fact/dimension tables).</li> <li>Documentation &amp; metadata.</li> </ul>"},{"location":"notes/prs/","title":"Effective Pull Requests","text":"<p>This is my baseline for effective pull requests using Git.</p> <p>Note that different teams might have established different approaches or conventions. Treat this page as a set of suggestions rather than a set of rules.</p>"},{"location":"notes/prs/#the-basics","title":"The Basics","text":"<p>A <code>commit</code> is a change in the code. Commits are stored in a repository (in our case this is managed by Git). The current state of the code is an aggregation of all known commits.</p> <p>A <code>pull request</code> (also known as <code>PR</code>) is a request to review changes in the code. A PR might include multiple commits. There are multiple tools available for managing pull requests: - Gerrit - Built-in tools by Git/Gitlab/Bitbucket etc. - IDEs also have integration for PRs.</p> <p>There are two groups of people who get involved in a PR: - The author(s) of the commits in the PR and - the reviewer(s).</p> <p>Pull requests have become very popular for a number of reasons. Some of them include: - They often lead to higher quality of source code. Just think that at least one more pair of eyes will have a look at your code. - Pull requests help keep a clean(er) and documented log of code evolution. - Team alignment. Different opinions can be discussed in the context of a PR, helping make a decision before merging. Conventions can also be enforced on PR level using automated tools (linters, code quality checks, test thresholds etc). It's also a great tool for helping newcomers or junior developer get up to speed with what you're working on.</p>"},{"location":"notes/prs/#creating-prs","title":"Creating PRs","text":""},{"location":"notes/prs/#make-it-short-and-sweet","title":"Make it short and sweet.","text":"<ul> <li>Keep it small in size. This will help reviewers to review changes fater.</li> <li>Keep it focused. Try to put only one thing in the PR (i.e. don't mix new linter rules with new features). This helps the reviewer to wrap his mind around the specific challenge the PR is trying to address.</li> <li>Keep it clean. Try to have a list of commits that follow your train of thought and implementation. </li> </ul>"},{"location":"notes/prs/#provide-context","title":"Provide context","text":"<p>When creating the PR, most likely you'll be prompted to provide a title and a description. This is a great opportunity to provide context to the reviewer(s). The title should describe what is the challenge addressed by the current PR. It can also have a prefix with the related JIRA issue or a prefix indicating whether the PR is a feature, bug, hotfix or something else. The description can provide additional context like: - A description of the challenge being addressed. - A checklist of items contained in the current PR. - Any decisions or assumptions. This is usually a great discussion starter. - Things to pay attention on. This is particularly useful when multiple reviewers are involved, and each one has expertise on a different part of the PR. - Any questions or follow up items. </p> <p></p>"},{"location":"notes/prs/#assign-your-audience","title":"Assign your audience","text":"<p>Before sharing your PR with reviewers, it's a good idea to first review your own PR! - Check your code one last time. - Go over the checklist. - See if you can remove any noise or simplify things. - Make sure any automated checks are passing.</p> <p>Then target your audience: - People that you need their opinion. - People that might learn from the PR.</p> <p>Since there are multiple roles in the audience, it's a good idea to specify who should focus on what.</p> <p>### Merge it</p> <p>After making sure that everyone has completed the review, the PR should be ready to be merged. Make sure there are no blockers:   - Merge conflicts.   - Tests are passing.   - Quality gates.   - Other deployments are passing.</p> <p>Merging is usually the responsibility of the PR's creator. However this might change, depending on release strategy, branching model etc. Make sure the team is aligned on this.</p>"},{"location":"notes/prs/#reviewing","title":"Reviewing","text":"<p>There's a list of common do's and do not's.</p> <ul> <li>\u2705 Checkout the code locally.</li> <li>\u2705 Read the PR's title and description.</li> <li>\u2705 Use the tool for reviews that makes you more productive.</li> <li>\u2705 Try to run the code and tests.</li> <li>\u26d4\ufe0f Ignore failing checks.</li> <li>\u2705 React on feedback from checks.</li> <li>\u2705 Request changes if there are no tests.</li> <li>\u2705 Provide feedback after tests are fixed.</li> <li>\u2705 Learn whenever checks fail.</li> </ul> <p>When commenting try to: - \u2705 Be polite. - \u2705 Offer praise. - \u2705 Visit the JIRA ticket or referenced documentation for extra information. - \u2705 Adapt on the style before asking for changes. - \u2705 Add your suggestions. - \u2705 Validate your assumptions and suggestions. - \u2705 Convert large suggestions to a new PR. - \u2705 Resist the urge to comment. Pick your battles wisely! - \u2705 Offer an alternative (Github's suggestion feature is great for that). - \u26d4\ufe0f Nitpicking. - \u2705 Take longer discussions to a call/meeting, BUT write result summary.</p> <p></p> <p>An extra thing I like to do is try to provide feedback in a positive manner, while remembering that this is feedback towared the code and not the author. Here's a few examples:</p> <ul> <li>\u26d4\ufe0f You are missing a variable here.</li> <li>\u2705 There's a variable missing here: [suggestion].</li> <li>\u26d4\ufe0f I don't like this approach.</li> </ul>"},{"location":"notes/rest/","title":"Things to read and consider when building RESTful services","text":"<ul> <li>Richardson Maturity Model - REST is more than using an HTTP method and URL structure. Richardson Maturity Model is a way to measure the different </li> <li>REST API Design Guide by National Bank of Belgium - things to consider when designing your APIs. Even if you don't adapt it, it's an extensive list of things to consider.</li> <li>OpenAPI Specification - One of the best ways for documenting REST APIs. Specifications can be used together with tools to either generate clients/skeletons and vice-versa.</li> </ul>"},{"location":"reading/","title":"Index","text":"<p>I enjoy reading a lot. I wish I had more time to read things.</p> <p>Books is the first medium we , I prefer books that can help you understand concepts and ideas or can act as reference. I try to avoid getting printed books for specific programming languages or frameworks.</p> <p>Newsletters are great for keeping up to date with new developments. There's also newsletters where people talk about their experiences or thoughts on specific topics. </p>"},{"location":"reading/newsletters/","title":"Newsletters","text":"<p>Things I read weekly.</p>"},{"location":"reading/newsletters/#data-machina","title":"Data Machina","text":"<p>Weekly curated list of links. Links are divided in sections, including popular links from the web, Python how-to's, deep learning, data visualization etc.</p>"},{"location":"reading/newsletters/#data-elixir","title":"Data Elixir","text":"<p>Weekly list of data and data science links. Plus you get an extra email each of the first three weeks with cool resources in statistics, SQL, visualization, machine learning and analytics.</p>"},{"location":"reading/newsletters/#counting-stuff","title":"Counting Stuff","text":"<p>Randy Au discusses a different topic each week. Topics focus on data collection, cleaning and research methodologies.</p>"},{"location":"reading/websites/","title":"Links","text":""},{"location":"reading/websites/#data-science-machine-learning","title":"Data Science &amp; Machine Learning","text":"<ul> <li>KDnuggets</li> <li>Towards Data Science </li> <li>Machine learning mastery</li> </ul>"},{"location":"reading/websites/#python","title":"Python","text":"<ul> <li>The Flask Mega-Tutorial</li> <li>Real Python</li> </ul>"},{"location":"reading/websites/#microservices","title":"Microservices","text":"<ul> <li>The twelve-factor app</li> </ul>"},{"location":"reading/websites/#things-i-wish-i-knew-when-i-started-working-as-a-software-engineer","title":"Things I wish I knew when I started working as a software engineer","text":"<ul> <li>Software Roles and Titles</li> <li>Your first 90 days as CTO or VP Engineering</li> <li>Reverse Interviewing Your Future Manager and Team</li> <li>The Two Types of Behavioral Interview Questions</li> </ul>"},{"location":"reading/books/","title":"Books","text":"<p>Books are the first medium we learn to read. I prefer books that can help you understand concepts and ideas or can act as reference. I try to avoid getting printed books for specific programming languages or frameworks.</p> <p>Here's my selection of topics.</p> <ul> <li> [Algorithms] \u2013 Algorithms and Data Structures</li> <li> [Data] \u2013 Books about data and machine learning.</li> <li> [Software Engineering] \u2013 Software engineering.</li> </ul> <p>If you are looking for a more extensive list of books, there's this epic question at Stack Overflow: What is the single most influential book every programmer should read?</p>"},{"location":"reading/books/algorithms/","title":"Algorithms","text":"<p>Algorithms and data structures.</p>"},{"location":"reading/books/algorithms/#introduction-to-algorithms","title":"Introduction to Algorithms","text":"<p>Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</p> <p> </p> <p>This is the book I studied back in the university. Initially known as <code>CLR</code> (Stein was not included as an author on first edition). It contains almost everything you need to know when studying either for university or coding tests.</p> <p> </p>"},{"location":"reading/books/algorithms/#the-algorithm-design-manual","title":"The Algorithm Design Manual","text":"<p>Steven S. Skiena</p> <p> </p> <p> </p>"},{"location":"reading/books/data/","title":"Data","text":"<p>Books related to data and statistics.</p>"},{"location":"reading/books/data/#designing-data-intensive-applications","title":"Designing Data Intensive Applications","text":"<p>By Martin Kleppmann</p> <p></p>"},{"location":"reading/books/data/#overview","title":"Overview","text":"<p>One of the most well-known books related to data engineering. Each chapter discusses different approaches or decisions of data systems. The topics vary from physical representation of data to challenges of distributed data systems.</p>"},{"location":"reading/books/data/#why-read-this-book","title":"Why read this book?","text":"<p>Each paragraph is distilled knowledge. It's great both for learning the internals of data systems and as a reference. Highly recommended if you're working with data.</p>"},{"location":"reading/books/data/#the-data-warehouse-toolkit","title":"The Data Warehouse Toolkit","text":"<p>By Ralph Kimball and Margy Ross</p> <p></p>"},{"location":"reading/books/data/#overview_1","title":"Overview","text":"<p>A \"...classic guide to dimensional modeling\".  Provides timeless techniques on data modelling, and helps structure your thoughts when making design decisions.</p>"},{"location":"reading/books/data/#why-read-this-book_1","title":"Why read this book?","text":"<p>A practical guide to dimensional modeling. This book can help you understand what is a star schema and thge types of fact and dimension tables. It also offer guidelines on designing the dimensional model. Great both for learning and as reference material. However be cautious before applying the learnings, as new technologies and approaches to data modelling have emerged.</p>"},{"location":"reading/books/data/#how-to-lie-with-statistics","title":"How to Lie with Statistics","text":"<p>By Darrell Huff</p> <p> </p>"},{"location":"reading/books/data/#overview_2","title":"Overview","text":"<p>Great book describing common statistics errors or missinterpretions to non-statiticians.</p>"},{"location":"reading/books/data/#why-read-this-book_2","title":"Why read this book?","text":"<p>Classic book about statistics. The book highlights errors of interpretation of statistics or misuse of concepts that might accidentally (?) misslead. It can help you review statistics in media with a more critical mindset. Examples might feel a bit dated (the book was actually written in 1954).</p>"},{"location":"reading/books/softeng/","title":"Software Engineering","text":"<p>Anything that can help become a more effective developer.</p>"},{"location":"reading/books/softeng/#design-patterns-elements-of-reusable-object-oriented-software","title":"Design Patterns: Elements of Reusable Object-Oriented Software","text":"<p>By Erich Gamma, Grady Booch, Richard Helm, Ralph Johnson, John Vlissides</p> <p></p>"},{"location":"reading/books/softeng/#overview","title":"Overview","text":"<p>Commonly known as Gang of Four (GoF) book. </p>"},{"location":"reading/books/softeng/#why-read-this-book","title":"Why read this book?","text":"<p>Why try to reinvent the wheel?</p>"},{"location":"reading/books/softeng/#effective-java","title":"Effective Java","text":"<p>By Joshua Bloch</p> <p></p>"},{"location":"reading/books/softeng/#overview_1","title":"Overview","text":"<p>One of the few books specific to a programming language that is worth having. The book is full of recipes on how to do things more effectively using the Java programming language.</p>"},{"location":"reading/books/softeng/#why-read-this-book_1","title":"Why read this book?","text":"<p>You want to become better in Java, right?</p>"},{"location":"reading/books/softeng/#system-design-interview-an-insiders-guide","title":"System Design Interview \u2013 An insider's guide","text":"<p>By Alex Xu</p> <p></p>"},{"location":"reading/books/softeng/#overview_2","title":"Overview","text":"<p>Each chapter presents the design of a different type of software system. The design is presented in a structured way, helping you gain confidence and a methodology for dealing with such tasks both on work environment and during an itnerview.</p>"},{"location":"reading/books/softeng/#why-read-this-book_2","title":"Why read this book?","text":"<p>Great as preparation for system design interviews (does justice to the title). Also great for helping you get a structured approach on designing software systems.</p>"}]}